* {
    box-sizing: border-box;

    // Prevent drag-to-reload on Android.  This should be the default for home screen apps.
    overscroll-behavior: contain;

    // On mobile, only allow touches to scroll, not to do things like zoom.
    touch-action: pan-x pan-y;

    // Disable images getting highlighted in blue on tap on mobile Chrome.   It would be
    // nicer to use something like a border...
    -webkit-tap-highlight-color:  rgba(255, 255, 255, 0);
    -webkit-touch-callout: none;
}

html {
    // For scrolling to work cleanly on iOS, we need the main scroller to be at the
    // top and not inside an absolute element, or else it gets confused and scrolling
    // randomly gets stuck.
    //
    // This is a nasty one: when iOS's viewport-fit=cover is used to disable safe
    // zones, height: 100% still uses the safe zone height, so windows are 20 pixels
    // too short on iPads.  Only Apple would redefine the meaning of "100%".  To work
    // around this we have to re-add the insets.  This is probably wrong on other mobile
    // browsers, but iOS is the only one I've done any testing on so far.
    --window-height: calc(100%);
    --window-height: calc(100% + env(safe-area-inset-top) + env(safe-area-inset-bottom));
    --window-width: calc(100%);
    --window-width: calc(100% + env(safe-area-inset-left) + env(safe-area-inset-right));
    height: var(--window-height);
    width: var(--window-width);

    background-color: var(--main-background-color);
    background-image: var(--background-noise);

    // If we're on the search view, always show the scrollbar, so it doesn't disappear and
    // reappear as we load searches, causing the UI to shift back and forth slightly.
    &[data-current-view="search"] {
        overflow-y: scroll;
    }
}

.ppixiv-icon {
    font-family: 'ppixiv';
    font-style: normal;
    font-weight: normal;
    font-variant: normal;
    text-transform: none;
    line-height: 1;
    letter-spacing: 0;
    font-feature-settings: "liga";
    -webkit-font-feature-settings: 'liga';
    font-variant-ligatures: discretionary-ligatures;
    -webkit-font-variant-ligatures: discretionary-ligatures;
    -webkit-font-smoothing: antialiased;
}

@font-face {
    font-family: 'Material Icons';
    font-style: normal;
    font-weight: 400;
    src: url("https://fonts.gstatic.com/s/materialicons/v129/flUhRq6tzZclQEJ-Vdg-IuiaDsNc.woff2") format('woff2');
}

// We don't use https://fonts.googleapis.com/icon?family=Material+Icons, since it
// rudely sets the font size on the icon, which is a nightmare for actually using the
// icons.
.material-icons {
    font-family: 'Material Icons';
    font-weight: normal;
    font-style: normal;
    // font-size: 24px;
    line-height: 1;
    letter-spacing: normal;
    text-transform: none;
    display: inline-block;
    white-space: nowrap;
    word-wrap: normal;
    direction: ltr;
    -webkit-font-feature-settings: 'liga';
    -webkit-font-smoothing: antialiased;
}

body {
    font-family: "Helvetica Neue", arial, sans-serif;
    margin: 0;
    color: #fff;
}

a {
    text-decoration: none;
    /*color: #fff;*/
    color: inherit;
}

html.mobile {
    // Disable hover popups on mobile:
    .popup:after { display: none !important; }

    font-size: 150%;
}

/* Theme colors: */
html {
    // The default size of icons relative to the current text size.  This roughly matches
    // the old icon size.
    --icon-size: 1.7;
    --icon-row-gap: 0.1em;
    &.mobile {
        --icon-size: 3;
        --icon-row-gap: 0.5em;
    }

    --main-background-color: #000;
    --background-noise: var(--dark-noise);

    --button-color: #888;
    --button-highlight-color: #eee;

    /* Colors for major UI boxes */
    --ui-bg-color: #222;
    --ui-fg-color: #fff;
    --ui-border-color: #000;
    --ui-shadow-color: #000; /* the shadow around some major UI elements */
    --ui-bg-section-color: #555; /* color for sections within UI, like the description box */

    --toggle-button-fg-disabled-color: #666;
    --toggle-button-fg-dim-color: #888;
    --toggle-button-fg-color: #fff;
    --toggle-button-bg-dim-color: #222;
    --toggle-button-bg-color: #444;

    /* Color for frames like popup menus */
    --frame-bg-color: #000;
    --frame-fg-color: #fff;
    --frame-border-color: #444;

    --dropdown-menu-hover-color: #444;

    /* Box links used for selection in the search UI: */
    --box-link-fg-color: var(--frame-fg-color);
    --box-link-bg-color: var(--frame-bg-color);
    --box-link-disabled-color: #888;
    --box-link-hover-color: #443;
    --box-link-selected-color: #008;
    --box-link-selected-hover-color: #338;

    /* Color for the minor text style, eg. the bookmark and like counts.
     * This is smaller text, with a text border applied to make it readable. */
    --minor-text-fg-color: #aaa;
    --minor-text-shadow-color: #000;

    --title-fg-color: #fff; /* title strip in image-ui */
    --title-bg-color: #444;

    --like-button-color: #888;
    --like-button-liked-color: #ccc;
    --like-button-hover-color: #fff;
}

html[data-theme="dark"]
{
    // Disable the lighter background noise when displaying an image.
    &[data-current-view="illust"] {
        --background-noise: "";
    }
}


html[data-theme="light"] {
    --main-background-color: #fff;
    --background-noise: var(--light-noise);

    --ui-bg-color: #eee;
    --ui-fg-color: #222;
    --ui-border-color: #ccc;
    --ui-shadow-color: #fff;
    --ui-bg-section-color: #ccc; /* color for subsections */

    --button-color: #666;
    --button-highlight-color: #222;

    --toggle-button-fg-dim-color: #222;
    --toggle-button-fg-color: #000;
    --toggle-button-bg-dim-color: #eee;
    --toggle-button-bg-color: #ccc;

    --frame-bg-color: #fff;
    --frame-fg-color: #222;

    --dropdown-menu-hover-color: #ccc;

    --box-link-hover-color: #ddc;
    --box-link-selected-color: #ffc;

    --minor-text-fg-color: #555; /* 555 */
    --minor-text-shadow-color: #fff; /* fff */

    --title-fg-color: #fff;
    --title-bg-color: #888;

    --like-button-liked-color: #222;
    --like-button-hover-color: #000;
}

[hidden] {
    display: none !important;
}

input {
    // Make this consistent, since user agent styles vary.
    padding: 1px 2px;
}

textarea:focus, input:focus, a:focus {
    outline: none;
}

/* Pixiv sometimes displays a random Recaptcha icon in the corner.  It's hard to prevent this since it
 * sometimes loads before we have a chance to stop it.  Try to hide it. */
.grecaptcha-badge {
    display: none !important;
}

.screen-illust-container {
    position: absolute;
    left: 0;
    top: 0;
    width: var(--window-width);
    height: var(--window-height);
    overflow: hidden;

    .view-container {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        user-select: none;
        -webkit-user-select: none;
        cursor: pointer;
    }
}

// Note that styles on the image itself need to be duplicated here on .low-res-preview
// and in ImageEditingOverlayContainer.  For some reason, custom elements prevent CSS
// styles from propagating into them, which is a real hassle.
.viewer-images {
    width: 100%;
    height: 100%;
}

.image-viewer {
    width: 100%;
    height: 100%;

    // Disable scrolling to prevent pointer events from being cancelled on mobile.
    touch-action: none;

    > .image-box {
        position: relative;
        transform-origin: 0 0;
        right: auto;
        bottom: auto;

        > .crop-box {
            position: relative;
            width: 100%;
            height: 100%;
        }
    }

    // If the image is cropped, set overflow: hidden on the image box to cut it
    // off.  Don't do this if it isn't needed, since it can trigger compositing
    // glitches in Chrome.
    > .image-box.cropping {
        overflow: hidden;

        // Work around an iOS Safari compositing bug.  If an image is cropped via .crop-box's
        // overflow: hidden, zooming the image leaves cruft from the edge row of the image behind.
        // Setting the image-box to will-change: transform seems to prevent this from happening.
        html.ios & {
            will-change: transform;
        }
    }

    // Let the browser know about our dynamic zooming and panning.  This prevents Chrome from baking the
    // resize when it doesn't change for a while, which causes a big hitch the next time we zoom.
    //
    // Don't do this on iOS, since it has some nasty compositing bugs when this is enabled.
    html:not(.ios) & > .image-box img {
        will-change: transform;
    }

    .displayed-image
    {
        position: absolute;
        width: 100%;
        height: 100%;
    }

    .inpaint-image, .low-res-preview
    {
        pointer-events: none;
    }
}

.viewer-ugoira, .viewer-video {
    width: 100%;
    height: 100%;
    > .video-container {
        width: 100%;
        height: 100%;
    }
}

.progress-bar {
    position: absolute;
    pointer-events: none;
    background-color: #F00;
    bottom: 0px;
    left: 0px;
    width: 100%;
    height: 2px;
    z-index: 100;
    @keyframes flash-progress-bar { to { opacity: 0; } }

    &.hide {
        animation: flash-progress-bar 500ms linear 1 forwards;
    }
}

// ppixiv.checkbox_widget:
.checkbox {
    font-size: 150%;
}

// This holds the seek bar and video UI.
.video-ui
{
    position: absolute;
    bottom: 0px;
    left: 0px;
    width: 100%;
    user-select: none;
    -webkit-user-select: none;
    touch-action: none;

    transition: transform .25s, opacity .25s;
    opacity: 0;

    // Visibility:
    // Stay visible if the mouse has moved recently, we're dragging, and while hovering
    // over the UI.
    .mouse-hidden-box.cursor-active &,      // Visible if the mouse has moved recently
    &.dragging,                             // Visible if we're dragging something in the UI
    &:hover,                                // Visible if we're hovering over the UI (XXX: not on mobile)
    &.show-ui                                // Visible if ppixiv.video_ui says so
    {
        opacity: 1;

        .seek-bar[data-position="top"] > .seek-parts
        {
            transform: scale(100%, 50%);
        }
    }

    .seek-bar {
        width: 100%;
        box-sizing: content-box;
        height: 12px;
        cursor: pointer;
        position: relative;

        // If we're above the video UI, add some padding to make the seek bar easier to click.
        // If we're below, don't do this so we're flush against the bottom of the video UI.
        &[data-position="top"] { padding-top: 25px; }

        // Hide the seek bar by default.  Show it when the mouse is visible or .visible is set
        // (50% height).  Expand it while dragging (100% height).
        //
        // If the seek bar is at the bottom, disable vertical scaling since we're flush against
        // the bottom of the video UI.
        &[data-position="top"] > .seek-parts
        {
            transition: transform .25s;
            transform: scale(100%, 0%);
            transform-origin: bottom;
        }

        &[data-position="bottom"] {
            // The seek bar is very narrow when below the video UI.  This is only used when in
            // fullscreen, and it's assumed that you can just move the mouse to the bottom of the
            // screen.
            height: 4px;

            // If we're below the video UI, set the empty background to the same as the video UI.
            > .seek-parts > [data-seek-part="empty"] {
                background-color: rgba(0,0,0,0.5);
            }
        }

        // Scale to full size during drags.
        &.dragging > .seek-parts {
            transform: scale(100%, 100%) !important;
        }

        > .seek-parts {
            width: 100%;
            height: 100%;

            > [data-seek-part]
            {
                height: 100%;
                position: absolute;
                left: 0;
                top: 0;
            }

            > [data-seek-part="fill"] { background-color: #F00; }
            > [data-seek-part="loaded"] { background-color: #A00; }
            > [data-seek-part="empty"] {
                background-color: rgba(0,0,0,0.25);
                width: 100%;
            }
        }
    }

    > .video-ui-strip
    {
        width: 100%;
        height: 100%;
        height: 3em;
        padding: 0 1em;
        display: flex;
        flex-direction: row;
        color: #ffffff;
        align-items: center;
        gap: 10px;
        background-color: rgba(0,0,0,0.5);

        // Tweak the vertical alignment for centering.
        padding-top: 4px;

        .button {
            cursor: pointer;
        }

        .font-icon {
            font-size: 36px;
        }

        > .time {
            font-family: Roboto,Arial,Helvetica,sans-serif;
            font-size: 1.2em;
        }

        .volume-slider {
            width: 100px;
            height: 100%;
            display: flex;
            flex-direction: row;
            align-items: center;
            margin-right: -10px;

            > .volume-line {
                height: 4px;
                width: 100px;
                flex: 1;
            }
        }
    }
}

.title-font {
    font-weight: 700;
    font-size: 20px;
    font-family: system-ui, -apple-system, BlinkMacSystemFont, Segoe UI, Roboto, Oxygen, Ubuntu, Cantarell,
        Droid Sans, Helvetica Neue, Hiragino Kaku Gothic ProN, Meiryo, sans-serif;
}

.small-font {
    font-size: 0.8em;
}

.hover-message,
.search-view > .no-results {
    width: 100%;
    position: fixed;
    bottom: 0px;
    display: flex;
    justify-content: center;

    & > .message {
        background-color: var(--frame-bg-color);
        color: var(--frame-fg-color);
        font-size: 1.4em;
        padding: 6px 15px;
        margin: 4px;
        max-width: 600px;
        text-align: center;
        border-radius: 5px;
        box-shadow: 0 0 10px 5px #aaa;
    }
}

.hover-message {
    transition: opacity .25s;
    opacity: 0;
    pointer-events: none;
    z-index: 100000; /* over everything */

    &.show {
        opacity: 1;
    }
}

/* The version in the search container is always centered. */
.search-results > .no-results {
    bottom: 50%;
}

.screen-illust-container {
    .ui {
        position: absolute;
        top: 0px;
        left: 0px;
        min-width: 450px;
        max-height: 500px;
        width: 30%;
        height: auto;

        /* Disable events on the top-level container, so it doesn't block clicks on the
         * image when the UI isn't visible.  We'll reenable events on the hover-box and ui-box
         * below it where we actually want pointer events. */
        pointer-events: none;

        .disabled {
            display: none;
        }
    }
}

/*
 * This is the box that triggers the UI to be displayed.  We use this rather than
 * ui-box for this so we can give it a fixed size.  That way, the UI box won't suddenly
 * appear when changing to another image because a longer description caused the box
 * to become bigger.
 *
 * This is a little tricky.  Hovering over either hover-box or the UI makes it visible.
 * When the UI is hidden, it's set to pointer-events: none, so it can't be hovered,
 * but once you hover over hover-box and cause the UI to be visible, pointer events
 * are reenabled so hovering over anywhere in the UI keeps it visible.  The UI is
 * over hover-box in the Z order, so we don't need to disable pointer events on hover-box
 * to prevent it from blocking the UI.
 *
 * We also disable pointer-events on the UI until it's visible, so it doesn't receive
 * clicks until it's visible.
 */
.hover-box {
    width: 400px;
    height: 200px;
    position: absolute;
    top: 0;
    left: 0;
    pointer-events: auto; /* reenable pointer events that are disabled on .ui */
}

.hover-sphere {
    width: 500px;
    height: 500px;

    /* Clamp the sphere to a percentage of the viewport width, so it gets smaller for
     * small windows. */
    max-width: 30vw;
    max-height: 30vw;
    position: absolute;
    top: 0;
    left: 0;

    circle {
        pointer-events: auto; /* reenable pointer events that are disabled on .ui */
    }

    &  > svg {
        width: 100%;
        height: 100%;
        transform: translate(-50%,-50%)
    }
}

.ui-box
{
    background-color: var(--ui-bg-color);
    color: var(--ui-fg-color);
    border: solid 2px var(--ui-border-color);
    padding: 1em;
    border-radius: 8px;
    position: relative;

    // The avatar icon in the top-right.  This is absolutely positioned, since we don't
    // want this to push the rest of the UI down.
    .avatar-popup
    {
        position: absolute;
        top: 1em;
        right: 1em;
    }

    .ui-title-box
    {
        display: flex;
        flex-direction: row;

        // Prevent this from overlapping the absolutely-positioned avatar icon above it.
        margin-right: 4em;
    }

    .author {
        vertical-align: top;
    }

    // Override the default visible-widget hiding behavior.
    &:not(.visible-widget)
    {
        display: inherit !important;
    }

    .screen-illust-container & {
        transition: transform .25s, opacity .25s;
        opacity: 0;
        transform: translate(-50px, 0);
        pointer-events: none;
        margin: .5em;

        // Make sure text doesn't stay selected while we're hidden.
        user-select: none;

        // Show the UI on hover when hide-ui isn't set.  force-ui is used for debugging.
        body:not(.hide-ui) &.visible-widget,
        body.force-ui &
        {
            opacity: 1;
            transform: translate(0, 0);
            pointer-events: auto;
            user-select: auto;
        }
    }

    .button.button-bookmark .count,
    .button.button-like .count
    {
        top: calc(100% - 11px);
        pointer-events: none;
    }
}

.button-row {
    display: flex;
    flex-wrap: wrap;
    flex-direction: row;
    align-items: center;
    gap: var(--icon-row-gap);

    .button.enabled {
        cursor: pointer;
    }
}

/* The row with the search title, with buttons aligned to the right.  The buttons
 * are always aligned to the top if the title is long. */
.title-with-button-row {
    display: flex;
    flex-direction: row;
    align-items: start;
}

.icon-button {
    color: var(--button-color);
    cursor: pointer;
    user-select: none;
    -webkit-user-select: none;
    display: block;

    // Set the size of the icon's box to the size the icon will be.  This is the same
    // as setting this element's font-size to 100% * icon-size, but we don't want to change
    // the font size of other things inside the box, like bookmark counts.
    width: calc(1em * var(--icon-size));
    height: calc(1em * var(--icon-size));
    flex-shrink: 0;

    .material-icons, .ppixiv-icon {
        display: block;
        font-size: calc(100% * var(--icon-size));
    }

    // If this is an icon-button with an svg inside, set the svg to block.
    svg {
        display: block;
        width: 100%;
        height: 100%;
    }

    @media(hover: hover) {
        // Highlight on hover.  If .parent-highlight is set, also highlight if the parent
        // is hovered.

        &:hover,
        :hover > &.parent-highlight
        {
            color: var(--button-highlight-color);
        }
    }

    &.highlighted {
        color: var(--button-highlight-color);
    }

    // If a button is directly inside a visible popup menu, eg. the navigation icon:
    .popup-visible > & {
        color: var(--button-highlight-color);
    }
}

@media(hover: hover) {
    .disable-ui-button:hover {
        color: #0096FA;
    }
}

.whats-new-button.updates > svg {
    color: #cc0;
}
html[data-theme="light"] .whats-new-button.updates > svg {
    color: #0aa; /* yellow doesn't work in a light theme */
}

.menu-slider input {
    vertical-align: middle;
    width: 100%;
    padding: 0;
    margin: 0;
    cursor: pointer;
}

.avatar-widget-follow-container {
    // Set relative so we're the positioning container for the follow dropdown.
    position: relative;

    .avatar {
        transition: filter .25s;
        display: block;
        position: relative;
        filter: contrast(1);
        transition: filter .25s;
        border-radius: 5px;
        object-fit: cover;

        &.loaded {
            box-shadow: 0 0 10px 4px #000;
        }

        @media(hover: hover) {
            &:hover {
                filter: contrast(1.3);
            }
        }
    }

    &:not(.big) .avatar {
        width: 50px;
        height: 50px;
    }

    &.big .avatar {
        width: 170px;
        height: 170px;
    }

    /* For the avatar in the popup menu, use the same size as the other popup menu buttons. */
    .avatar-widget-container & .avatar {
        width: 44px;
        height: 44px;
    }

    // Position the follow dropdown.
    .follow-box {
        position: absolute;
        top: 100%;
    }

    // When we're in the context menu, push the dropdown down a bit so it's aligned with the edge
    // of the menu instead of the avatar icon inside it.
    &:not(.big) .follow-box {
        top: calc(100% + 10px);
    }

    // Hide the avatar while we're waiting for user data to load, since the follow icon isn't
    // updated until then.
    &.loading {
        visibility: hidden;
        pointer-events: none;
    }

    .follow-icon {
        position: absolute;
        bottom: 0;
        text-align: center;
        height: auto;
        width: 50%; /* half the size of the container */
        max-width: 50px; /* limit the size for larger avatar displays */
        right: 0;

        > svg {
            display: block;
            width: 100%;
            height: auto;
            transition: opacity .25s;

            /* Move the icon down, so the bottom of the eye is along the bottom of the
            * container and the lock (if visible) overlaps. */
            margin-bottom: -20%;
        }

        > svg .middle {
            transition: transform .1s ease-in-out;
            transform: translate(0px, -2px);
        }
    }

    .avatar-link {
        display: block;
    }
}

.follow-container
{
    display: flex;
    flex-direction: column;
    background-color: var(--frame-bg-color);
    border: 1px solid var(--frame-border-color);
    padding: .25em;
    overflow-y: auto;

    .separator {
        // For some reason flex overrides our height if the dropdown is scaled down
        // from reaching the bottom of the screen.  This happens even if we explicitly
        // set a height and set flex-shrink to 0.  Work around this by setting our height
        // in a child element.
        > div {
            height: 2px;
        }
        width: 100%;
        background-color: #fff;
        margin: 2px 0;
    }

    .material-icons {
        margin-right: 8px;
    }
}

.title-block {
    display: inline-block;
    padding: 0 10px;
    color: var(--title-fg-color);
    background-color: var(--title-bg-color);
    margin-right: 1em;
    border-radius: 8px 0;

    @media(hover: hover) {
        &.popup:hover:after {
            top: 40px;
            bottom: auto;
        }
    }
}

/* When .dot is set, show images with nearest neighbor filtering. */
body.dot img.filtering,
body.dot canvas.filtering {
    image-rendering: crisp-edges;
    image-rendering: pixelated;
}

.post-info > * {
    display: inline-block;
    background-color: var(--box-link-bg-color);
    color: var(--box-link-fg-color);
    padding: 2px 10px;

    /* Use a smaller, heavier font to distinguish these from tags. */
    font-size: .8em;
    font-weight: bold;
}
.description {
    border: solid 1px var(--ui-border-color);
    padding: .35em;
    background-color: var(--ui-bg-section-color);
    max-height: 10em;
    overflow-y: auto;
}
html[data-theme="light"] .description {
    border: none;
}
/* Override obnoxious colors in descriptions.  Why would you allow this? */
.description * {
    color: var(--ui-fg-color);
}

.popup {
    position: relative;

    @media(hover: hover) {
        &:hover:after {
            pointer-events: none;
            background: #111;
            border-radius: .5em;
            top: -2.0em;
            color: #fff;
            content: attr(data-popup);
            display: block;
            padding: .3em 1em;
            position: absolute;
            text-shadow: 0 1px 0 #000;
            white-space: nowrap;
            z-index: 98;

        }
        &[data-popup-side="left"]:hover:after   { right: 0em; }
        &[data-popup-side="right"]:hover:after,
        &:not([data-popup-side]):hover:after    { left: 0em; }

        &.popup-bottom:hover:after {
            top: auto;
            bottom: -2em;
        }
    }
}

body:not(.premium) .premium-only { display: none; }
body:not(.native) .native-only { display: none; }
body:not(.pixiv) .pixiv-only { display: none; }
body.hide-r18 .r18 { display: none; }
body.hide-r18g .r18g { display: none; }

.popup-menu-box {
    position: absolute;
    overflow-y: auto;
    left: 0;
    top: 100%; // bottom of the positioning menu item
    min-width: 10em;
    background-color: var(--frame-bg-color);
    border: 1px solid var(--frame-border-color);
    padding: .25em .5em;
    z-index: 2;
}

.popup-menu-box.hover-menu-box {
    visibility: hidden;
}
.popup-visible .popup-menu-box.hover-menu-box {
    visibility: inherit;
}

/* This is an invisible block underneath the hover zone to keep the hover UI visible. */
.hover-area {
    position: absolute;
    top: -50%;
    left: -33%;
    width: 150%;
    height: 200%;
    z-index: -1;
}

.top-ui-box
{
    /* This places the thumbnail UI at the top, so the thumbnails sit below it when
     * scrolled all the way up, and scroll underneath it. */
    position: sticky;
    top: 0;
    width: calc(100% - var(--navigation-box-reserved-width));
    display: flex;
    flex-direction: row;
    align-items: center;
    padding-top: 1em;
    padding-bottom: .5em;
    z-index: 1;

    /* Prevent the empty space around the UI for centering from eating button presses. */
    pointer-events: none;

    /* If .ui-on-hover is set, switch to showing the top UI when it's hovered instead of sticky. */
    body.ui-on-hover &
    {
        position: fixed;
        top: auto;
        bottom: 100%;
        left: 0;
        transition: transform ease-out .2s;

        /* Normally pointer-events is disabled above, so the sides of the UI box don't cover clicks.
         * However, that also makes the hover not include the top padding above the UI, causing it
         * to flicker on and off when the mouse is in that area.  This is tricky to fix nicely, so just
         * stop disabling pointer-events when ui-on-hover is enabled. */
        pointer-events: auto;
    }

    /* This is used to temporarily disable the transition when the ui-on-hover setting is
     * changed in the options menu. */
    body.ui-on-hover &.disable-transition
    {
        transition: none;
    }
}

/* .force-open is set to lock the UI in place when a menu is open.  It has the same
 * effect as a hover. */
body.ui-on-hover .top-ui-box.hover,
body.ui-on-hover .top-ui-box.force-open
{
    transform: translateY(100%);
}

body.ui-on-hover .top-ui-box:not(.hover):not(.force-open)
{
    /* This is the amount the UI pokes on-screen when not hovered. */
    transform: translateY(40px);
}

/* When ui-on-hover is disabled we get spacing at the top of the thumbs automatically from
 * position: sticky, but ui-on-hover is position: fixed and we don't get that, so we have
 * to add padding manually. */
body.ui-on-hover .top-ui-box + .top-ui-box-padding
{
    height: 30px;
}

.screen-search-container {
    .search-results {
        // If the nav box is open, shift the search results to make room for it.
        margin-left: var(--navigation-box-reserved-width);
    }

    .thumbnail-ui-box-container {
        width: 50%;

        // Make sure this doesn't get too narrow, or it'll overlap too much of the thumbnail area.
        min-width: calc(min(800px, 100%));
        padding: 0 15px;
    }

    .thumbnail-ui-box {
        width: 100%;
        background-color: var(--ui-bg-color);
        color: var(--ui-fg-color);
        box-shadow: 0 0 15px 10px var(--ui-shadow-color);
        border-radius: 4px;

        padding: 10px;
        pointer-events: auto;

        .displaying {
            padding-bottom: 4px;
        }
        .displaying .word {
            padding: 0px 5px;

            // Parentheses:
            &.paren { font-weight: 400; }
        }

        .displaying .word:first-child {
            padding-left: 0px; /* remove left padding from the first item */
        }

        .displaying .word.or {
            font-size: 12px;
            padding: 0;
            color: #bbb;
        }

        // Flip the icon to point to the left.
        .clear-local-search .icon {
            transform: scale(-1, 1);
        }

        .user-links {
            gap: 0.1em;

            .fanbox-icon {
                // This is weird, since Inkscape doesn't support setting obscure attributes like "class".
                [inkscape\:label="edge"],
                [inkscape\:label="ear-left"],
                [inkscape\:label="ear-right"],
                [inkscape\:label="hand-right"]
                {
                    fill: currentColor !important;
                }
            }
        }
    }

    .following-tag {
        text-decoration: none;
    }
}

.search-view
{
    /* .thumbnails is the actual thumbnail list. */
    .thumbnails {
        user-select: none;
        -webkit-user-select: none;
        padding: 0;
        text-align: center;
        gap: var(--thumb-padding);
        max-width: var(--container-width);

        // Make room for Chrome's (ugly, annoying, distracting and pointless) status bar.
        padding-bottom: 2em;

        display: flex;
        flex-wrap: wrap;

        // Justify-content centers the thumbs within our max width, but margin: 0 auto
        // centers us within the window if our max width is smaller than the window.
        justify-content: center;
        margin: 0 auto; /* center */

        /* Add a stroke around the heart on thumbnails for visibility.  Don't
         * change the black lock. */
        .button-bookmark svg > .heart {
            stroke: #000;
            stroke-width: .5px;
        }
    }

    .flash a {
        animation-name: flash-thumbnail;
        animation-duration: 300ms;
        animation-timing-function: ease-out;
        animation-iteration-count: 1;
    }

    @keyframes flash-thumbnail {
        0% {
            filter: brightness(200%);
        }
    }

    // Marker above the last viewed image:
    .last-viewed-image-marker {
        position: absolute;
        left: 0;
        top: 0;
        pointer-events: none;

        // This is set by make_thumbnail_sizing_style based on the thumbnail size.
        // width: 100px;
        height: auto;

        // Scale the size of the marker to the size of the thumb.
        width: calc(var(--thumb-width)/4);
    }

    .thumbnail-box:not(.flash) .last-viewed-image-marker {
        display: none;
    }

    .load-previous-page {
        width: 100%;

        & > .load-previous-buttons {
            margin-left: auto;
            margin-right: auto;
            display: flex;
            flex-direction: row;
            margin-top: 10px;
            margin-bottom: 4px;
            justify-content: center;
            height: 40px;
            max-width: 400px;

            & > .load-previous-button {
                display: flex;
                flex-direction: column;
                align-items: center;
                justify-content: center;
                flex-grow: 1;
                margin: 0 10px;
                background-color: #880;
                border-radius: 4px;
                padding: 0 10px;
                color: var(--box-link-fg-color);
                background-color: var(--box-link-bg-color);

                @media(hover: hover) {
                    &:hover {
                        background-color: var(--box-link-hover-color);
                    }
                }
            }
        }
    }

    .thumbnail-box.expanded-thumb a.thumbnail-link {
        border-bottom: 10px solid #a0a;
        border-bottom-width: 10px;
        border-bottom-style: solid;
        &.first-page { border-bottom-left-radius: 30px; }
        &.last-page { border-bottom-right-radius: 30px; }
    }

    .thumbnail-box {
        position: relative;
        width: var(--thumb-width);
        height: var(--thumb-height);
        content-visibility: auto;
        contain-intrinsic-size: var(--thumb-width) var(--thumb-height);
        contain: strict;

        .thumb {
            object-fit: cover;

            /* Show the top-center of the thunbnail.  This generally makes more sense
            * than cropping the center. */
            object-position: 50% 0%;
            width: 100%;
            height: 100%;
        }

        /* Hide pending images (they haven't been set up yet). */
        &[data-pending] {
            visibility: hidden;
        }

        a.thumbnail-link {
            display: block;
            width: 100%;
            height: 100%;

            border-radius: 4px;
            overflow: hidden;
            position: relative;
            text-decoration: none;
            color: #fff;
        }

        // Thumbnail zooming
        //
        // If thumbnail zooming is enabled, zoom thumbs in while not hovered.
        --zoom-thumb: 1;
        body:not(.disable-thumbnail-zooming) &:not(:hover) { --zoom-thumb: 1.25; }

        .thumb
        {
            transition: transform .5s;
            transform: scale(var(--zoom-thumb));
        }

        // Thumbnail panning
        //
        // Pause panning animations while the mouse isn't over them.
        --pan-thumb: paused;
        body:not(.disable-thumbnail-panning) &:hover { --pan-thumb: running; }

        &.muted {
            .muted-text {
                pointer-events: none;
                left: 0;
                top: 50%;
                width: 100%;
                height: 32px;
                position: absolute;
                color: #000;
                text-shadow: 0px 1px 1px #fff, 0px -1px 1px #fff, 1px 0px 1px #fff, -1px 0px 1px #fff;
                font-size: 22px;
            }

            /* Zoom muted images in a little, and zoom them out on hover, which is the opposite
            * of other images.  This also helps hide the black bleed around the edge caused by
            * the blur. */
            .thumb {
                filter: blur(5px) grayscale(1);
                transform: scale(1.25, 1.25);
            }

            body:not(.disable-thumbnail-zooming) & .thumb:hover {
                transform: scale(1, 1);
            }
        }

        &:not(.muted) .muted-text {
            display: none;
        }

        @media(hover: hover) {
            // Hide the manga page button beyond the first page when not hovering.
            &.expanded-manga-post:not(:hover):not(.first-manga-page) .manga-info-box {
                display: none;
            }
        }

        .show-manga-pages-button {
            font-size: 16px;
        }

        // Hide the manga index button beyond the first page.
        &:not(.first-manga-page) .show-manga-pages-button {
            display: none !important;
        }

        .bottom-row {
            position: absolute;
            display: flex;
            align-items: center;
            justify-content: center;

            // Slight padding between the icons and the text.  Note that this is applied even
            // if there's no icon, and it's applied to the empty flexes between the items, so
            // this is very small.
            gap: 4px;
            pointer-events: none;
            width: 100%;
            height: 32px;
            bottom: 3px;
            padding: 0 4px;

            // These are tricky.  We want the label to be centered, and if icons are shown in the
            // corners, the label stays centered as long as there's room.  It only shifts or shrinks
            // if we run out of space.  Give the boxes for icons an equal width and an extremely large
            // flex-shrink.  The boxes will try to be the same size if there's nothing inside them, so
            // they'll shrink by the same amount, and the huge flex-shrink will cause them to shrink
            // completely to make room for the label as needed.  If an icon is shown inside them the
            // box will have a minimum size and not shrink past that, but the shrinking will still
            // happen evenly until it reaches that size.
            .bottom-left-icon, .bottom-right-icon {
                height: 32px;
                width: 100px;
                flex-shrink: 100000;
                display: flex;
                align-items: center;
            }

            .bottom-right-icon {
                justify-content: end;
            }

            .thumbnail-label {
                display: flex;
                align-items: center;
                gap: .5em;
                flex-shrink: 1;
                white-space: nowrap;
                color: var(--frame-fg-color);
//                background-color: var(--frame-bg-color);
                background-color: rgba(0,0,0,.6);
                padding: 4px 8px;
                overflow: hidden;
                border-radius: 6px;

                .thumbnail-ellipsis-box {
                    text-overflow: ellipsis;
                    overflow: hidden;

                    & > .label {
                        /* Specify a line-height explicitly, so vertical centering is reasonably consistent for
                         * both EN and JP text. */
                        line-height: 19px;
                    }
                }

                .ugoira-icon {
                    color: #fff;
                    transition: opacity .5s;
                }
            }

            .heart {
                width: 32px;
                height: 32px;
                > svg {
                    transition: opacity .5s;
                }
            }

            .manga-info-box {
                display: inline-flex;
                align-items: center;
                gap: 4px;
                padding: 0 4px;
                background-color: rgba(0,0,0,.6);
                border-radius: 6px;
                transition: opacity .5s;
                white-space: nowrap;
                pointer-events: auto; // turn pointer events back on
                border-radius: 6px;
                overflow: hidden; // clip the hover background-color to our border radius

                .show-manga-pages-button {
                    display: inline-flex;
                    padding: 4px 0px;

                    @media(hover: hover) {
                        &:hover {
                            background-color: rgba(0,20,120,.8);
                        }
                    }
                }

                .expand-button {
                    display: inline-flex;
                    padding: 4px 0px;

                    .page-icon {
                        width: 16px;
                        height: 16px;
                        display: inline-block;
                        vertical-align: middle;
                    }
                    &:hover {
                        background-color: rgba(0,20,120,.8);
                    }
                    &:hover .regular {
                        display: none;
                    }
                    &:not(:hover) .hover {
                        display: none;
                    }

                    .page-count {
                        vertical-align: middle;
                        padding-left: 2px;
                        margin-bottom: -4px; // hack to center correctly
                    }
                }
            }
        }

        &.expanded-thumb .page-count {
            // color: #0f0;
        }
    }

    @media(hover: hover) {
        .thumbnail-box:hover .heart > svg {
            opacity: 0.5;
        }
        .thumbnail-box:hover .ugoira-icon {
            opacity: 0.5;
        }
    }

    [data-type="order-shuffle"] .icon {
        font-size: 24px;
    }
}

// A row of box-links inside a menu row.  This is used for menu items that have
// secondary buttons, like the public and private bookmark search buttons.  For
// these the main box-link doesn't stretch to fill the row, so it's easy to tell
// what button you're pressing, and the extra buttons are flush right.
.box-link-row {
    display: flex;
    flex-direction: row;
    align-items: center;
    gap: 0.5em;

    // Note that the padding on box-links here matches the horizontal padding
    // on .vertical-list .box-link.
    > .box-link {
        padding-left: 0.5em;
        padding-right: 0.5em;
    }
}

// box-links in horizontal strips.  Add horizontal padding between these.
.box-button-row {
    display: flex;
    flex-direction: row;
    flex-wrap: wrap;
    align-items: center;
    row-gap: 0.25em; // space between lines if we wrap

    > .box-link {
        margin: 0 0.25em; // horizontal spacing between buttons
        padding: 0 .5em; // horizontal padding within the button

        // Place vertical padding on the contents rather than the box, so clicks are always
        // within one of the items and not on the small vertical padding around it.
        //
        // For box links that are just <a class=box-link>text</a>, the vertical padding is added
        // in the a.box-link rule.
        & > * {
            padding: .25em 0;
        }
    }
}

// box-links that are in a horizontal strip have vertical padding outside the box, to
// space them apart.  box-links that are in a vertical dropdown menu have their vertical
// padding inside the button, so there's no empty space between menu items.  The total
// padding stays the same.
.vertical-list
{
    // For box-links directly within the list (most of them), put the horizontal
    // padding on them.
    > .box-link { padding: 0 .5em; }

    > .box-link
    {
        display: flex;
        flex-direction: row;
        align-items: center;

        margin-top: 0;
        margin-bottom: 0;
    }
}

.box-link {
    display: inline-flex;
    cursor: pointer;
    text-decoration: none;
    margin: 0;
    padding: 0 .75em;
    align-content: center;
    align-items: center;
    height: 2em;
    border-radius: 2px;

    color: var(--box-link-fg-color);
    //user-select: none;
    -webkit-user-select: none;

    background-color: var(--box-link-bg-color);

    .label {
        // This is so the label text aligns correctly with .icon .material-icons.
        vertical-align: middle;
        // white-space: nowrap;
    }

    &:not(.allow-wrap) {
        white-space: nowrap;
    }

    .explanation {
        // white-space: normal;
    }

    &.selected {
        background-color: var(--box-link-selected-color);
    }

    @media(hover: hover) {
        &:hover:not(.disabled) {
            background-color: var(--box-link-hover-color);
            &.selected { background-color: var(--box-link-selected-hover-color); }
        }
    }

    &.disabled {
        color: var(--box-link-disabled-color);
        cursor: auto;

        // Also prevent disabled links from showing an unfilled URL:
        pointer-events: none;
    }

    &.tag {
        /* Some tags are way too long, since translations don't put any sanity limit on length.
         * Cut these off so they don't break the layout. */
        max-width: 100%;
        text-overflow: ellipsis;
        overflow: hidden;
    }

    // An icon on the left side.
    .icon {
        display: inline-block;
        // position: relative;

        // If this is a material icon, .material-icons will try to change the font size, which
        // is rude.  Override it to inherit the current font size.
        font-size: inherit;
        vertical-align: middle;

        // .icon.with-text is an icon that has a label next to it, which is most of them.  If .with-text
        // isn't set, this is an icon-only button, like the shuffle button.
        &.with-text {
            margin-right: 0.25em;

            // Force the width to 1ch, so the icon takes up space even if it's empty.  This keeps labels
            // in lists  aligned if some items have icons and some don't.  If there should be no space at
            // all, the icon will be hidden.
            width: 1ch;
        }

        &:not(.with-text) {
            // There's no text, so increase the size of the icon to fill the button better.
            font-size: 150%;
        }
    }
}

// box-link buttons that are A or SPAN don't have children, so put the padding on the box itself.
a.box-link, span.box-link
{
    padding-top: 0.5em;
    padding-bottom: 0.5em;
}

.search-box {
    white-space: nowrap;
    margin-bottom: 4px;
    position: relative; /* to position the search dropdown */
    max-width: 100%;
}

/* The block around the input box and submit button.  A history dropdown widget will
 * be placed in here. */
.tag-search-box {
    display: inline-block;
    position: relative;
}

.input-field-container {
    background-color: white;
    padding: 6px 10px;

    // Let the input box flex to fill our width, so the box stays the same size
    // and doesn't change if right-side-buttons are shown or hidden.
    display: inline-flex;
    gap: 0.25em;
    align-items: center;

    // Set a default width, so input has something to stretch to and stay a consistent
    // size if buttons are hidden.  Allow this to be smaller to fit.
    width: calc(min(300px, 100%));

    > input {
        background: none;
        border: none;
        font-size: 1.2em;
        vertical-align: middle;
        flex: 1;

        // Remove the default min-width.
        min-width: 0;
    }

    // Buttons to the right of the input box:
    > .right-side-button {
        display: inline-block;
        vertical-align: middle;
        cursor: pointer;
        user-select: none;
        -webkit-user-select: none;
        color: black;

        & > svg
        {
            vertical-align: middle;
        }
    }
}

.search-submit-button {
    /* Work around HTML's stupid whitespace handling */
    font-size: 0;
    display: inline-block;
}

/* Search box in the menu: */
.navigation-search-box {
    .search-submit-button {
        vertical-align: middle;
        margin-left: -30px; /* overlap the search box */
    }
    input.search-tags {
        width: 100%;
        padding-right: 30px; /* extra space for the submit button */
    }
}

.thumbnail-ui-box .avatar-container {
    float: right;
    position: relative;
    margin-left: 25px;
}

.image-for-suggestions {
    float: right;
    margin-left: 25px;

    & > img {
        display: block;
        height: 150px;
        width: 150px;
        object-fit: cover;
        border-radius: 5px; /* matches the avatar display */
    }
}

.mute-display {
    .muted-image {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        object-fit: cover;
        filter: blur(20px);
        opacity: .75;
    }

    .muted-text {
        position: absolute;
        width: 100%;
        top: 50%;
        left: 0;
        text-align: center;
        font-size: 30px;
        color: #000;
        text-shadow: 0px 1px 1px #fff, 0px -1px 1px #fff, 1px 0px 1px #fff, -1px 0px 1px #fff;
    }
}

/* Tag lists are usually inline.  Make the tag filter a vertical list. */
.member-tags-box .post-tag-list,
.search-tags-box .related-tag-list,
.bookmark-tags-box .bookmark-tag-list,
.local-bookmark-tags-box .local-bookmark-tag-list {
    max-height: 50vh;
    min-width: 20em;
    overflow-x: hidden;
    overflow-y: auto;
    white-space: nowrap;

    // If this tag is marked as having been searched for recently, highlight it.
    // This is used in the artist data source.
    .recent {
        --box-link-bg-color: #550;
        --box-link-hover-color: #660;
    }

    // Adjust the popup for the tag lists so they don't cover the tag.
    .tag-entry:hover:after
    {
        left: auto;
        right: 0px;
    }
}

/* These affect both the search edit and search history boxes. */
.input-dropdown {
    width: 500px; /* overridden by script */
    max-width: 800px;
    margin: 1px;
    z-index: 1;
    user-select: none;
    -webkit-user-select: none;

    /* Always show the vertical scrollbar.  Otherwise, the resize handle falls under the buttons
     * when it's not shown. */
    overflow-x: hidden;
    overflow-y: scroll;
    resize: horizontal;
    position: absolute;
    background-color: #fff;

    .search-history > & > .input-dropdown-list {
        display: flex;
        flex-direction: column;
        white-space: normal;
    }

    .input-dropdown-list > .entry {
        display: flex;
        flex-direction: row;
        color: #000;
        align-items: center;

        /* This 6px vertical padding should match the remove-history-entry padding. */
        padding: 6px 0;

        .search {
            color: #000;
            flex: 1;
            padding-left: 7px;
            height: 100%;
        }

        .search .word {
            display: inline-flex;
            align-items: center;
            height: 100%;
            padding: 0px 5px;

            &.or {
                font-size: 12px;
                padding: 0;
                color: #333;
            }
        }
    }

    /* Styles specific to the search history version of the dropdown: */
    .search-history > & > .input-dropdown-list {
        & > .entry .suggestion-icon {
            margin: 2px -2px 0 2px;
        }
        & > .entry:not(.autocomplete) .suggestion-icon {
            display: none;
        }

        & > .entry.selected {
            background-color: #ffa;
        }

        @media(hover: hover) {
            & > .entry:hover {
                background-color: #ddd;
            }
        }

        .remove-history-entry {
            height: 30px;
            width: 30px;

            /* Set an arbitrarily low negative margin.  This makes it so the button extends into the
             * into the surrounding row's padding instead of pushing the whole row out.  See
             * .input-dropdown-list > .entry padding. */
            margin: -6px 0;

            display: inline-flex;
            align-items: center;
            justify-content: center;
            @media(hover: hover) {
                visibility: hidden;
            }
        }

        /* Hide the button to remove history entries from non-history entries. */
        & > .entry:not(.history) .remove-history-entry {
            display: none;
        }

        @media(hover: hover) {
            & > .entry:hover .remove-history-entry {
                visibility: visible;
            }
            .remove-history-entry:hover {
                color: #000;
                background-color: #c0c0c0;
            }
        }
    }

    /* Styles specific to the edit search version of the dropdown. */
    .edit-search > & {
        padding: 4px 0;

        /* The edit search list is shown as a wrapped list, so enable wrapping and switch items from flex to inline-flex. */
        & > .input-dropdown-list {
            white-space: normal;
            max-width: 100%;

            & > .entry {
                display: inline-flex;
                & > A.search {
                    .tag.highlight { background-color: #eeee00; }
                    @media(hover: hover) {
                        .tag:hover { background-color: #0099FF; }
                        .tag.highlight:hover { background-color: #00CCFF; }
                    }
                }
            }
        }
    }
}

.widget:not(.visible-widget)
{
    display: none;
}

/* The right click context menu for the image view: */
.popup-context-menu {
    color: #fff;
    position: fixed;
    z-index: 1;
    top: 100px;
    left: 350px;
    text-align: left;
    padding: 10px;
    border-radius: 8px;
    display: flex;
    flex-direction: column;
    z-index: 10;
    user-select: none;
    -webkit-user-select: none;
    will-change: opacity, transform;
    transition:
        opacity ease 0.15s,
        transform ease 0.15s;

    // Override the default visible-widget hiding behavior.
    &:not(.visible-widget)
    {
        display: inherit;
        opacity: 0;
        pointer-events: none;
        transform: scale(.85);
    }

    &.visible-widget
    {
        opacity: 1;
    }

    & > * {
        transform-origin: unset;
    }

    /* Hide the normal tooltips.  The context menu shows them differently. */
    & .popup:hover:after {
        display: none;
    }

    & .tooltip-display {
        display: flex;
        align-items: stretch;
        padding: 10px 0 0 8px;
        pointer-events: none;
    }

    .tooltip-display .tooltip-display-text {
        background-color: var(--frame-bg-color);
        color: var(--frame-fg-color);
        padding: 2px 8px;
        border-radius: 4px;
    }

    .button-strip {
        display: flex;
        align-items: stretch;

        & > .button-block {
            display: inline-block;
            background-color: var(--frame-bg-color);
            padding: 12px;
        }

        /* Remove the double horizontal padding: */
        & > .button-block:not(:first-child) { padding-left: 0px; }

        /* Remove the double vertical padding.  Do this with a negative margin instead of zeroing
         * the padding, so the rounded black background stays the same size. */
        &:not(:last-child) > .button-block { margin-bottom: -12px; }

        /* Round the outer corners of each strip. */
        & > .button-block:first-child { border-radius: 5px 0 0 5px; }
        & > .button-block:last-child { border-radius: 0 5px 5px 0; }

        .button {
            border-radius: 4px;
            padding: 6px;
            height: 100%;
            text-align: center;
            cursor: pointer;
            display: flex;
            flex-direction: column;
            justify-content: center;
            background-color: var(--toggle-button-bg-dim-color);
            color: var(--toggle-button-fg-dim-color);

            /* Grey out the buttons if this strip isn't enabled. */
            &:not(.enabled)
            {
                cursor: inherit;
                color: var(--toggle-button-fg-disabled-color);
            }

            & > * {
                min-width: 32px;
            }
            & > svg {
                width: 32px;
                height: 32px;
            }

            @media(hover: hover) {
                &.enabled:hover {
                    color: var(--toggle-button-fg-color);
                }
            }

            &.enabled.selected {
                background-color: var(--toggle-button-bg-color);
                color: var(--toggle-button-fg-color);
            }

            /* We don't have a way to add classes to inlined SVGs yet, so for now just use nth-child.
               The first child is the + icon and the second child is -. */
            &.button-zoom:not(.selected) > :nth-child(1) { display: none; }
            &.button-zoom.selected > :nth-child(2) { display: none; }

            /* Popup menu bookmarking */
            .tag-dropdown-arrow {
                width: 0;
                height: 0;
                border-top: 10px solid #222;
                border-left: 10px solid transparent;
                border-right: 10px solid transparent;
            }

            html[data-theme="light"] & .tag-dropdown-arrow {
                border-top-color: #ccc;
            }
        }

        /* This nudges the zoom strip to the left by the width of one button, to add the browser
         * back button to the left of other buttons. */
        & > .button-block.shift-left {
            margin-left: -56px;
        }

        .button-block > .button > .font-icon {
            font-size: 200%;
        }
    }

    .context-menu-image-info-container {
        // Bottom align within the row.
        align-self: flex-end;
        background-color: var(--box-link-bg-color);
        padding-right: 8px;

        // Mobile Chrome sometimes randomly selects this text while it's hidden, causing
        // the translation popup to appear.
        user-select: none;
        -webkit-user-select: none;
    }

    .context-menu-image-info {
        display: flex;
        flex-direction: column;
        align-items: center;
        font-size: .8em;
        font-weight: bold;
        gap: 2px;
        padding: 4px 0;
    }

    .popup-bookmark-tag-dropdown {
        // Nudge the dropdown to the left by the width of a button-block
        // when it's inside the popup menu.
        right: -100%;
    }
}

.popup-more-options-container {
    .button-send-image {
        svg .arrow {
            transition: transform ease-in-out .15s;
        }

        &:not(.disabled):hover svg .arrow {
            transform: translate(2px, -2px);
        }
    }
}

.popup-bookmark-tag-dropdown,
.popup-more-options-dropdown {
    background-color: var(--frame-bg-color);
    color: var(--frame-fg-color);
    position: absolute;
    padding: 4px;
    top: calc(100%);
    border-radius: 0px 0px 4px 4px;

    /* Put this on top of other elements, like the image-ui tag list. */
    z-index: 1;
}

.bookmark-tag-list,
.more-options-dropdown
{
    /* In the context menu version, nudge the tag dropdown up slightly to cover
     * the rounded corners. */
    .popup-context-menu & {
        top: calc(100% - 4px);
    }

    & > .tag-list {
        display: flex;
        flex-direction: column;
        min-width: 200px;
        overflow-x: hidden;
        overflow-y: auto;

        .tag-list-buttons
        {
            display: flex;
            gap: 0.5em;
            justify-content: space-around;
        }
    }

    /* Recent bookmark tags in the popup menu: */
    .popup-bookmark-tag-entry {
        display: flex;
        flex-direction: row;
        align-items: center;
        padding: 4px 8px;
        display: flex;
        cursor: pointer;
        > .tag-name {
            flex: 1;
        }

        background-color: var(--box-link-bg-color);
        &.selected {
            background-color: var(--box-link-selected-color);
        }

        @media(hover: hover) {
            &:hover {
                background-color: var(--box-link-hover-color);
                &.selected { background-color: var(--box-link-selected-hover-color); }
            }
        }
    }
}

.mobile-illust-ui-container
{
    position: absolute;
    top: 0px;
    left: 0px;
    width: 100%;
    height: calc(100% - var(--video-ui-height));
    display: flex;

    &[data-side="left"] { justify-content: flex-start; }
    &[data-side="right"] { justify-content: flex-end; }

    // This node is for positioning and covers the whole screen, so don't eat pointer events.
    pointer-events: none;

    // Use a very slightly transparent black for the frame, and disable the box link background so it
    // just uses the frame background.
    // --frame-bg-color: #111;
    --frame-bg-color: rgba(0,0,0,.65);
    --box-link-bg-color: none;

    // Handle opening from the left or right side.  --page-left and --page-right position
    // the top-level menu.  --transform-direction allows flipping transitions horizontally
    // for the right side, and --transform-side allows changing the transform-origin if needed.
    &[data-side="left"] { --page-left: 80px; }
    &[data-side="right"] { --page-right: 80px; }
    --transform-direction: 1;
    --transform-side: 0%;
    --transform-align: flex-end;
    &[data-side="right"] { --transform-direction: -1; --transform-side: 100%; --transform-align: flex-start; }

    &[data-side="left"] .context-menu-image-info-container {
        right: 10px;
    }

    &[data-side="right"] .context-menu-image-info-container {
        left: 10px;
    }

    // The image info in the top-right is a separate element from the UI pages.
    .context-menu-image-info-container {
        position: fixed;
        top: 10px;
        max-width: calc(100vw - 100px);
        display: flex;
        flex-direction: column;
        gap: 0.5em;
        overflow: hidden;
        font-size: .8em;
        font-weight: bold;

        transition:
            opacity ease 0.2s,
            transform ease 0.2s;
        opacity: 1;

        // The background and padding for the tag list goes on the individual tags.
        .context-menu-image-info
        {
            background-color: var(--frame-bg-color);
            border-radius: .25em;
            padding: 6px;
            text-align: center;

            .title-text-block {
                overflow: hidden;
                white-space: nowrap;
                text-overflow: ellipsis;
                max-width: 100%;
                > .folder-block {
                    color: #aaa;
                    .slash {
                        font-size: 12px;
                    }
                }
            }
        }

        .mobile-bookmark-tag-overlay
        {
            .bookmark-tags
            {
                margin-top: 0.25em;
                display: flex;
                flex-wrap: wrap;
                flex-direction: column;
                gap: 0.5em 0.5em;
                align-items: var(--transform-align);

                .mobile-ui-tag-entry {
                    // Only wrap between tags, not in the middle.
                    white-space: nowrap;
                    // background-color: #444;
                    background-color: var(--frame-bg-color);
                    padding: .5em 0.75em;
                    border-radius: .25em;

                    // Add a slight padding so the box shadow isn't clipped by the overflow: hidden on
                    // our container.
                    margin-left: 0.5em;

                    // border: 1px solid #fff;
                    border-radius: 4px;

                    box-shadow: 0 0 7px 1px #000;

                    .bookmark-tag-icon {
                        vertical-align: middle;
                    }
                }
            }
        }
    }

    // Hide the image info box if the UI is hidden or if we're showing a submenu.
    &:not(.shown),
    &[data-displayed-page] {
        .context-menu-image-info-container {
            opacity: 0;
            transform: translateX(calc(20px*var(--transform-direction)));
        }
    }

    // Subpages are absolutely positioned to the right of the top menu.
    .mobile-illust-ui-page:not(.top-page)
    {
        position: absolute;
        top: 0;
        left: var(--page-left);
        right: var(--page-right);
        height: 100%;
        display: flex;
        flex-direction: column;
    }

    // For popup menus in the mobile UI like the bookmark tag list, transition
    // opacity and transform together.  Note that we don't use a blur background
    // for the larger dialogs.  They need a large blur radius to not cause eyestrain,
    // which is too slow on Android.
    .mobile-illust-ui-page:not(.top-page)
    {
        transition:
            transform ease 0.2s,
            opacity ease 0.2s;
        opacity: var(--opacity);
    }

    // For the top-level menu, move the opacity into top-page-button-row.  This
    // works around a compositing bug on mobile Chrome: it doesn't composite
    // backdrop-filter layers correctly when a parent is transitioning opacity,
    // and the opacity transition needs to happen on the same node.  iOS doesn't
    // have this problem.
    .mobile-illust-ui-page.top-page
    {
        transition: transform ease 0.2s;

        .top-page-button-row {
            transition: opacity ease 0.2s;
            opacity: var(--opacity);
        }
    }

    // One UI page is shown at a time.
    .mobile-illust-ui-page
    {
        padding: 10px;
        overflow-y: auto;

        user-select: none;
        -webkit-user-select: none;

        transform-origin: calc(var(--transform-side)) 50%;
        --opacity: 1;

        pointer-events: none;

        // --pointer-events is "auto" if elements should receive pointer events, or "none" if
        // we're hidden.  This is applied with pointer-events: var(--pointer-events) to the correct
        // element.  We don't just do it here since we don't want the gap between the top menu to
        // block pointer events.
        --pointer-events: auto;
        &:not(.active-tab) { --pointer-events: none; }

        // By default, apply pointer-events on immediate children of the page.
        > * { pointer-events: var(--pointer-events); }

        &:not(.active-tab) {
            --opacity: 0;
            transform: translateX(calc(-20px*var(--transform-direction))) scale(0.75);

            // Disable pointer events while we're not visible.
            --pointer-events: none;
        }

        // Adjust these widgets so they look better in this view.
        .bookmark-tag-list {
            max-height: 100%;
            overflow-y: scroll;
            background-color: var(--frame-bg-color);
            padding: 10px;
            border-radius: 8px;

            .popup-bookmark-tag-entry {
                font-size: 200%;
            }

            .tag-right-button-strip {
                top: 10px;
            }
        }

        .more-options-dropdown {
            font-size: 150%;
            border-radius: 8px;
            background-color: var(--frame-bg-color);
            overflow-x: hidden;
            overflow-y: auto;
        }

        // The top menu:
        .top-page-button-row {
            background-color: var(--frame-bg-color);
            padding: 10px;
            display: flex;
            flex-direction: column;
            gap: 10px;
            border-radius: 15px;
            background-color: rgba(0,0,0,0);

            border-top: 1px solid rgba(255,255,255,0.5);
            border-left: 1px solid rgba(255,255,255,0.5);

            // CSS prefixing is horrible.
            backdrop-filter: contrast(1.5) blur(20px);
            -webkit-backdrop-filter: contrast(1.5) blur(20px);

            .item {
                display: flex;
                flex-direction: row;
                align-items: center;
                gap: 10px;

                // Grey out the button and label if this item isn't enabled.
                &:not(.enabled)
                {
                    cursor: inherit;
                    color: #aaa;
                    > .button {
                        color: #aaa;
                    }
                }

                > .button {
                    border-radius: 15px;
                    padding: 6px;
                    display: flex;
                    flex-direction: row;
                    justify-content: center;
                    background-color: rgba(0,0,0,.5);
                    color: #fff;

                    & > svg {
                        width: 2em;
                        height: 2em;
                    }

                    /* We don't have a way to add classes to inlined SVGs yet, so for now just use nth-child.
                    The first child is the + icon and the second child is -. */
                    &.button-zoom:not(.selected) > :nth-child(1) { display: none; }
                    &.button-zoom.selected > :nth-child(2) { display: none; }

                    /* Popup menu bookmarking */
                    .tag-dropdown-arrow {
                        width: 0;
                        height: 0;
                        border-top: 10px solid #222;
                        border-left: 10px solid transparent;
                        border-right: 10px solid transparent;
                    }
                    .font-icon {
                        font-size: 200%;
                    }
                }
            }
        }

        &.top-page
        {
            height: 100%;

            // The top-page-buttons container holds the button blocks.  We have two of these,
            // which are intended to separate in the middle to give a place where the user can
            // tap the image to hide the menu.
            .top-page-buttons {
                height: 100%;
                display: flex;
                flex-direction: column;
                justify-content: space-around;

                // This sets the minimum space between the UI sections, so there's always some
                // empty space to close the menu.
                gap: 50px;

                // Ignore pointer events in this container, so the space between the items can be
                // used to close the menu.
                pointer-events: none;

                > .top-page-button-row
                {
                    // Since we overrode pointer-events above, it won't reenable pointer events
                    // while we're visible.  Do that on the individual button rows instead.
                    pointer-events: var(--pointer-events);
                }
                &:not(.display-labels) .item > .label {
                    display: none;
                }
            }
        }
    }
}

.button.button-bookmark .count,
.button.button-like .count
{
    color: var(--minor-text-fg-color);

    text-shadow:
        0px 1px 1px var(--minor-text-shadow-color),
        0px -1px 1px var(--minor-text-shadow-color),
        1px 0px 1px var(--minor-text-shadow-color),
        -1px 0px 1px var(--minor-text-shadow-color);
    font-size: .7em;
    font-weight: bold;
    position: absolute;
    top: calc(100% - 14px);
    left: 0;
    width: 100%;
    text-align: center;
}

/* Nudge the public heart icon up a bit to make room for the bookmark count.
 * Only do this on the popup menu, not image-ui. */
.popup-context-menu .button.button-bookmark.public.has-like-count > svg
{
    margin-top: -10px;
}
.popup-context-menu .button.button-like > svg
{
    margin-top: -2px;
}

/* Hide the "delete" stroke over the heart icon unless clicking the button will
 * remove the bookmark. */
svg.heart-image .delete {
    display: none;
}

.button-bookmark {
    // Bookmark buttons.  These appear in image_ui and the popup menu.
    @media(hover: hover) {
        &.button.will-delete.enabled:hover svg.heart-image .delete {
            display: inline;
        }
    }

    // These are !important to override the default white coloring in the context
    // menu.
    svg {
        color: #400 !important;
    }

    &.enabled svg {
        color: #800 !important;
        stroke: none;
    }
    &.bookmarked svg {
        color: #f00 !important;
        stroke: none;
    }
    @media(hover: hover) {
        &.enabled:hover svg {
            color: #f00 !important;
            stroke: none;
        }
    }
}

.button.button-like {
    /* This is a pain due to transition bugs in Firefox.  It doesn't like having
     * transition: transform on both an SVG and on individual paths inside the
     * SVG and clips the image incorrectly during the animation.  Work around this
     * by only placing transitions on the paths. */
    & > svg {
        color: var(--like-button-color);
    }

    &.liked > svg {
        color: var(--like-button-liked-color);
    }
    @media(hover: hover) {
        &.enabled:hover > svg {
            color: var(--like-button-hover-color);
        }
    }
}

.button.button-browser-back {
    .arrow {
        transition: transform ease-in-out .15s;
        transform: translate(-2px, 0px);
    }
    @media(hover: hover) {
        &:hover .arrow {
            transform: translate(1px, 0px);
        }
    }
}

.button.button-like {
    --overall-translate-x: 0;
    --overall-translate-y: 0;
    --mouth-scale-x: 1;
    --mouth-scale-y: 0.75;
    --mouth-translate-x: 0;
    --mouth-translate-y: 0;

    &.liked {
        --mouth-scale-x: 1;
        --mouth-scale-y: 1.1;
        --mouth-translate-x: 0;
        --mouth-translate-y: -3px;
        --overall-translate-x: 0;
        --overall-translate-y: -3px;
    }

    @media(hover: hover) {
        &.enabled:hover {
            --overall-translate-x: 0;
            --overall-translate-y: -2px;
            --mouth-scale-x: 1;
            --mouth-scale-y: 0.9;
            --mouth-translate-x: 0;
            --mouth-translate-y: -3px;
        }
    }

    > svg {
        > * {
            transition: transform ease-in-out .15s;
            transform: translate(var(--overall-translate-x), var(--overall-translate-y));
        }
        > .mouth {
            transform: scale(var(--mouth-scale-x), var(--mouth-scale-y)) translate(var(--mouth-translate-x), var(--mouth-translate-y));
        }
    }
}
.button-bookmark.public svg.heart-image .lock {
    display: none;
}
.button-bookmark svg.heart-image .lock {
    stroke: #888;
}

.dialog {
    position: fixed;
    z-index: 1000;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0,0,0,0.75);
    display: flex;
    align-items: center;
    justify-content: center;

    .content {
        font-size: 18px;

        &[data-dialog-type="normal"] {
            // Normal dialogs can fill the screen, with a maximum width so they aren't too
            // wide on wide screens and a minimum width so layout doesn't break if the window is
            // tiny.  This allows dialogs to fill the screen on smaller windows.
            width: 100%;
            min-width: 20em;
            max-width: 45em;
        }

        &[data-dialog-type="small"] {
            // Small popups just size to fit their content.
            max-width: 45em;
        }

        background-color: var(--ui-bg-color);
        color: var(--ui-fg-color);
        border-radius: 5px;
        position: relative;
        padding: 1em;
        display: flex;
        flex-direction: column;

        > .scroll {
            //width: 100%;
            //height: 100%;
            flex: 1;
            overflow-y: auto;
        }
    }

    .header {
        font-size: 40px;
        margin-bottom: 20px;
    }
}

.whats-new-box {
    width: 80%;
    height: 80%;

    .font-icon {
        vertical-align: bottom;
    }

    .rev {
        display: inline-block;
        color: var(--box-link-fg-color);
        background-color: var(--box-link-bg-color);
        padding: 5px 10px;
    }
    .text {
        margin: 1em 0;
        padding: 0 20px; /* inset horizontally a bit */
    }
}

.close-button {
    position: absolute;
    top: 5px;
    right: 5px;
    color: var(--button-color);
    cursor: pointer;
    @media(hover: hover) {
        &:hover {
            color: var(--button-highlight-color);
        }
    }
    & > svg {
        display: block;
    }
}

.screen-illust-container {
    .page-change-indicator {
        position: absolute;
        height: 100%;
        display: flex;
        align-items: center;
        pointer-events: none;

        &[data-side="left"] {
            margin-left: 20px;
            left: 0;
        }

        &[data-side="right"] {
            margin-right: 20px;
            right: 0;
        }

        &[data-side="right"] svg {
            transform-origin: center center;
            transform: scale(-1, 1);
        }

        /* Hide the | portion of >| when showing last page rather than end of results. */
        &[data-icon="last-page"] svg .bar {
            display: none;
        }
        svg {
            opacity: 0;
        }
        &.flash svg {
            animation: flash-page-change-opacity 400ms ease-out 1 forwards;
        }

        &.flash svg .animated {
            animation: flash-page-change-part 300ms ease-out 1 forwards;
        }
    }

    @keyframes flash-page-change-opacity {
        0%   { opacity: 1; }
        40%  { opacity: 1; }
        80%  { opacity: 0; }
    }

    @keyframes flash-page-change-part {
        0%   { transform: translate( 0, 0px); }
        20%  { transform: translate(-4px, 0px); }
        100% { transform: translate( 0, 0px); }
    }
}

.link-tab-popup
{
    .explanation {
        max-width: 25em;
        width: 100%;
        text-align: center;
        margin: 0 auto;
    }

    .button {
        display: inline-block;
        cursor: pointer;
        background-color: #000;
        padding: .5em 1em;
        margin: .5em;
        border-radius: 5px;
    }

    .content {
        width: 400px;
        padding: 1em;
    }

    .buttons {
        display: flex;
    }

    .tutorial-monitor {
        width: 290px;
        height: 125px;

        // This SVG has padding on the bottom so the rotating monitor doesn't get clipped as
        // it turns.  Remove some of that for layout.
        margin-bottom: -20px;

        .rotating-monitor {
            transform-origin: 75px 30px;
            // transform: rotate(90deg);
            animation: rotate-monitor 4500ms linear infinite;

            @keyframes rotate-monitor {
                0% { transform: rotate(0deg); }
                10% { transform: rotate(90deg); }
                50% { transform: rotate(90deg); }
                60% { transform: rotate(0deg); }
            }
        }
    }
}

.link-this-tab-popup, .send-image-here-popup
{
    > .box {
        border: 1px solid black;
        background-color: #000;
        color: #fff;
        padding: 1em;
    }
}

.dialog .text-entry-popup
{
    .header {
        font-size: 20px;
    }

    .input-box {
        position: relative;
        display: flex;
        align-items: center;

        > input {
            flex: 1;
            padding: 4px;
        }
        > .submit-button {
            cursor: pointer;
            display: inline-block;
            width: 20px;
            text-align: center;
            margin-left: 6px;
            border: 1px solid white;
            html[data-theme="light"] & { border-color: #444; }
        }

        @media(hover: hover) {
            > .submit-button:hover {
                background-color: #444;
                html[data-theme="light"] & { background-color: #aaa; }
            }
        }
    }
}

.dialog .confirm-popup
{
    gap: 0.5em;
    .title {
        font-size: 20px;
    }

    .input-box {
        display: flex;
        align-items: center;
        gap: 0.5em;
    }
}

.years-ago {
    padding: .25em;
    margin: .25em;
    white-space: nowrap;
    /* These links are mostly the same as box-link, but since the
     * menu background is the same as the box-link background color,
     * shift it a little to make it clear these are buttons. */
    > a {
        padding: 4px 10px;
        background-color: #444;
        html[data-theme="light"] & {
            background-color: #ccc;
        }
    }
}

.tree
{
    user-select: none;
    -webkit-user-select: none;
    overflow-x: hidden;
    overflow-y: auto;
    flex: 1;

    .tree-item
    {
        position: relative;

        // Items can use content-visibility if they have no children, which makes the list
        // much faster when there are a lot of items.  If an item has expanded children then
        // the parent container doesn't have a fixed height since the children nodes are part
        // of the parent, so this is only enabled for non-expanded items.
        contain-intrinsic-height: 32px;
        &.allow-content-visibility {
            content-visibility: auto;
        }

        // If this isn't the root node, add padding to the left of our children.
        &:not(.root) > .items {
            margin-left: 1em;
        }

        &.selected > .self > .label
        {
            background-color: #003088;
        }

        > .self {
            display: flex;
            flex-direction: row;
            align-items: center;
            height: 2em;

            &:focus
            {
                // Hide the default focus outline.
                outline: none;

                > .label
                {
                    //background-color: #880;
                }
            }

            > .label
            {
                // This padding matches .tree-popup > .label.
                padding: 0.5em;
                white-space: nowrap;
            }

            &.root
            {
                display: none;
            }

            > .expander {
                display: flex;
                justify-content: center;
                align-items: center;

                font-size: 50%;
                width: 3em;
                height: 100%;

                & > .expander-button {
                    // Hide all buttons by default.
                    display: none;
                    width: 3em;
                    text-align: center;
                    vertical-align: middle;
                }

                // Modes are "none", "loading", "expandable" and "expanded".
                &[data-mode="loading"] > .loading
                {
                    display: block;
                }

                &[data-mode="none"] > .none
                {
                    display: block;
                }

                // Dim pending expanders.
                &[data-pending="true"] > .expand
                {
                    opacity: 0.5;
                }

                &[data-mode="expandable"] > .expand,
                &[data-mode="expanded"] > .expand
                {
                    display: block;
                }

                .expand
                {
                    transform: rotate(0deg);
                    transition: transform .25s;
                }

                &[data-mode="expanded"] > .expand
                {
                    transform: rotate(90deg);
                }
            }
        }
    }
}

.screen-search-container {
    --navigation-box-width: 25%;
    --navigation-box-reserved-width: var(--navigation-box-width);

    // If we're not showing navigation, don't reserve space for it.  Don't change the actual
    // nav box's size, so we can transition it in and out cleanly.
    &:not([data-show-navigation]) { --navigation-box-reserved-width: 0%; }
}

.local-navigation-box {
    height: 100vh;
    width: var(--navigation-box-width);
    position: fixed;
    top: 0;
    left: 0;
    background-color: #111;
    border-right: solid 1px #444;
    padding-top: 0.5em;
    padding-left: 0.5em;
    opacity: 1;
    transition: opacity .35s, transform .35s;
    display: flex;
    flex-direction: column;

    .screen-search-container:not([data-show-navigation]) & {
        opacity: 0;
        pointer-events: none;
        transform: translate(-50%, 0);
    }
}

.tree-popup
{
    background-color: #222;
    color: #fff;
    position: fixed;
    pointer-events: none;
    outline-style: dotted;
    outline-width: 1px;
    outline-color: #aaa;

    > .label
    {
        // This padding matches .tree .label.
        // padding: 0.5em;
        white-space: nowrap;
    }
}

.thumb-popup
{
    position: fixed;
    pointer-events: none;
    margin-left: 10px;
    width: 25%;
    height: 40%;
    max-height: 400px;
    max-width: 400px;
    > img
    {
        object-fit: contain;
        width: 100%;
        height: 100%;
    }
}

.dialog .settings-dialog
{
    // Try to set a fixed minimum height, so the dialog doesn't resize when the page is
    // changed, but allow it to go lower if the screen is very small.
    height: calc(min(30em, 100%));

    display: flex;
    flex-direction: row;

    // The section selector on the left side of the settings dialog:
    > .sections {
        white-space: nowrap;
        display: flex;
        flex-direction: column;
        overflow-y: auto;

        > .settings-header {
            position: sticky;
            top: 0;
            font-size: 1.5em;
            background-color: #222222C0;

        }
        > .box-link {
            padding: 0.5em;
            cursor: pointer;

            &:not(.selected) {
                opacity: 0.65;
            }

            &:not(.active) {
                background: none;
            }

            @media(hover: hover) {
                &:hover {
                    background-color: var(--box-link-hover-color);
                }
            }
        }
    }

    > .items {
        flex: 1;

        // Scroller for the individual settings pages:
        overflow-y: auto;

        .settings-page-title {
            font-size: 1.5em;
            padding: 0 0.5em;
        }
    }

    .settings-list {
        display: flex;
        flex-direction: column;

        .settings-row {
            padding: 0.5em 1em;
            gap: 1em;
        }

        .box-link {
            // Disable some regular box-link styles:
            height: auto;
            background-color: inherit;

            // Extra buttons (the linked tabs "edit" button):
            > .buttons > .box-link {
                padding: 0.35em .75em;
            }

            &.button {
                background-color: var(--box-link-bg-color);
            }

            @media(hover: hover) {
                &.clickable:hover:not(.disabled) {
                    background-color: var(--box-link-hover-color);
                }
            }

            // If this isn't a clickable row, such as a slider, disable effects on hover.
            &:not(.clickable):hover {
                cursor: inherit;
                background: none;
            }
        }

        // Top-level box-links inside settings pages put their explanation underneath the
        // label.
        > .box-link > .label-box {
            margin-left: .25em;
            flex: 1;
            display: flex;
            flex-direction: column;
            gap: .25em;
            .label {
                padding-top: .25em; // adjust for descenders
                margin: 0; // disable regular margin
            }

            .explanation {
                font-size: 16px;
                opacity: 0.75;
            }
        }
    }
}

.edit-post-mute-dialog {
    & > .content {
        width: 80%;
        min-height: 10em;
        min-width: 800px;
        padding: 1em;
    }
}

.muted-tags-popup {
    padding: 0.5em 1em;
    display: flex;
    flex-direction: column;
    gap: 0.5em;
    max-height: 440px;
    overflow-y: auto;
}

.edit-post-mute-dialog,
.muted-tags-popup
{
    .mute-warning {
        border: solid 2px black;
        border-radius: 15px;
        background-color: #000;
        padding: 1em;
    }

    .add-muted-user-box {
        .font-icon {
            font-size: 24px;
            vertical-align: middle;
        }
    }

    .non-premium-mute-warning {
        // For the edit tags dialog, prevent the button from overlapping the dialog
        // close button.
        margin-right: 40px;

        .icon {
            font-size: 24px;
            color: #ffff00;
        }
    }

    .post-mute-list {
        display: flex;
        flex-direction: column;
        gap: 4px;

        .entry {
            display: flex;
            align-items: center;
            gap: 0.5em;
            &.muted .tag-name {
                color: #ffaaaa;
            }
        }
    }

    .mute-list .remove-mute .font-icon {
        font-size: 24px;
        vertical-align: middle;
    }
}

.image-editor {
    width: 100%;
    height: 100%;
    position: absolute;
    top: 0;
    left: 0;
    z-index: 1; // above the image
    pointer-events: none;

    &.temporarily-hidden {
        display: none;
        pointer-events: none;
    }

    .save-edits.dirty {
        color: #0f0;
    }

    .spinner .icon {
        animation: spin 1000ms linear infinite forwards;
    }
    .image-editor-buttons {
        // Hide the top buttons if the window doesn't have focus.
        body:not(.focused) &.top {
            display: none;
        }

        &.top {
            top: 0.5em;
        }
        &.bottom {
            bottom: 0.5em;
        }
        position: absolute;
        display: grid;
        grid-template-columns: 1fr auto 1fr;
        font-size: 150%;
        width: 100%;
        align-items: flex-start;

        > .left { margin-right: auto; }
        > .center { grid-column-start: 2 }
        > .right { margin-left: auto; }

        .image-editor-button-row {
            pointer-events: auto;
        }

        .block-button {
            .font-icon {
                display: block;
            }
        }
    }

    @keyframes spin {
        0%   { transform: rotate(0); }
        100% { transform: rotate(360deg); }
    }
}

.crop-editor-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;

    .crop-box {
        position: relative;

        // This sets how far the handles overlap into the middle area.
        --overlap: 1vh;

        [data-crop="all"] {
            // A large box shadow around the middle area to dim the image:
            box-shadow: 0px 0px 0px 10000px #00000080;
        }

        &[data-mode="crop"] [data-crop="all"] {
            outline: 3px solid #fff;
            outline-style: ridge;
        }

        &[data-mode="safe_zone"] [data-crop="all"] {
            // Use a different outline style in this mode as a visual cue for which mode you're in.
            outline: 1px solid #fff;
            outline-offset: 1px;

            // When editing the safe zone, dragging the middle moves the image instead of the rect, so
            // it's easier to move the view around.
            pointer-events: none;
        }

        .handle {
            position: absolute;

            &[data-crop="top"]         { cursor: n-resize !important; }
            &[data-crop="left"]        { cursor: w-resize !important; }
            &[data-crop="right"]       { cursor: e-resize !important; }
            &[data-crop="bottom"]      { cursor: s-resize !important; }
            &[data-crop="topleft"]     { cursor: nw-resize !important; }
            &[data-crop="topright"]    { cursor: ne-resize !important; }
            &[data-crop="bottomleft"]  { cursor: sw-resize !important; }
            &[data-crop="bottomright"] { cursor: se-resize !important; }
            &[data-crop="all"]         { cursor: move !important; }

            // Handle positions:
            &[data-crop="top"]         { width: 100%;    height: 10000px; bottom: calc(100% - var(--overlap)); }
            &[data-crop="left"]        { width: 10000px; height: 100%;    right:  calc(100% - var(--overlap)); }
            &[data-crop="right"]       { width: 10000px; height: 100%;    left:   calc(100% - var(--overlap)); }
            &[data-crop="bottom"]      { width: 100%;    height: 10000px; top:    calc(100% - var(--overlap)); }

            &[data-crop="topleft"]     { width: 10000px; height: 10000px; right:  calc(100% - var(--overlap)); bottom: calc(100% - var(--overlap)); }
            &[data-crop="topright"]    { width: 10000px; height: 10000px; bottom: calc(100% - var(--overlap)); left: calc(100% - var(--overlap)); }
            &[data-crop="bottomleft"]  { width: 10000px; height: 10000px; top:    calc(100% - var(--overlap)); right: calc(100% - var(--overlap)); }
            &[data-crop="bottomright"] { width: 10000px; height: 10000px; top:    calc(100% - var(--overlap)); left: calc(100% - var(--overlap)); }
            &[data-crop="all"] { width: 100%;    height: 100%;    left:   0; }
        }
    }
}

.inpaint-editor-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;

    &.creating-lines {
        cursor: crosshair !important;
    }

    .inpaint-segment {
        // inpaint-editor-overlay disables pointer-events.  Turn it back on here.
        pointer-events: auto;

        &.selected
        {
            .inpaint-line {
                //fill: #000;
                // stroke: #FFF;
            }
        }

        .inpaint-line {
            fill: none;
            stroke: #f00;
            stroke-linecap: round;
            stroke-linejoin: round;
            stroke-opacity: 0.75;
            mix-blend-mode: difference;
        }

        &:hover {
            pointer-events: all;

            .inpaint-handle {
                stroke: #000;
            }
        }

        .inpaint-handle {
            opacity: 0;
        }

        &.selected .inpaint-handle,
        &:hover .inpaint-handle
        {
            opacity: 1;
        }

        .inpaint-handle {
            fill: none;
            opacity: 0.25;
            stroke: #000;
            pointer-events: all;
        }
    }
}

.pan-editor-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;

    // SVG is overflow: hidden by default.  Set the handle to overflow: visible, so it can
    // be seen if it's offscreen.  It still won't be visible if cropping is active since the
    // crop will cut it off, but that's hard to fix.
    .handle {
        overflow: visible;
    }

    .pan-editor-crop-region {
        width: 100%;
        height: 100%;
        position: relative;
    }

    .monitor-preview-box {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        transform-origin: 0 0;

        > .box {
            // A large box shadow to dim the image:
            box-shadow: 0px 0px 0px 100000px #00000080;
            outline: 1px dashed #fff;
            width: 100%;
            height: 100%;
        }
    }
}
